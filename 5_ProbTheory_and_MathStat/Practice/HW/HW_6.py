from Practice.utils import correlation_calculate, covariance_calculate, my_print, conf_interval_calculate, \
    math_expect_calculate, std_calculate
import numpy as np
import pandas as pd

# ----------------------------------------------------------------------------------------------------------------
task = "Даны значения величины заработной платы заемщиков банка (zp) \n" \
       "и значения их поведенческого кредитного скоринга (ks):\n" \
       "zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].\n" \
       "Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy\n" \
       "Полученные значения должны быть равны. \n" \
       "Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков,\n" \
       "а затем с использованием функций из библиотек numpy и pandas."

my_print(msg=task, separator_before=True, separator_after=False, color='зеленый')

zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110]

ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]

df = pd.DataFrame({'zp': zp, 'ks': ks})

my_print(f"Ковариация по формуле: {covariance_calculate(zp, ks, ddof=1)}\n"
         f"Ковариация numpy: {np.cov(zp, ks, ddof=1)[0][1]}\n"
         f"Ковариация pandas: {df.cov().values[0, 1]}\n"
         f"Корреляция Пирсона по формуле: {correlation_calculate(zp, ks, ddof=1)}\n"
         f"Корреляция numpy {np.corrcoef(zp, ks, ddof=1)[0][1]}\n"
         f"Корреляция pandas: {df.corr().values[0, 1]}\n", color='синий')

# ----------------------------------------------------------------------------------------------------------------

task = "Измерены значения IQ выборки студентов, обучающихся в местных технических вузах: \n" \
       "131, 125, 115, 122, 131, 115, 107, 99, 125, 111. \n" \
       "Известно, что в генеральной совокупности IQ распределен нормально. \n" \
       "Найдите доверительный интервал для математического ожидания с надежностью 0.95."

my_print(msg=task, separator_before=True, separator_after=False, color='зеленый')
sample = [131, 125, 115, 122, 131, 115, 107, 99, 125, 111]
ci = conf_interval_calculate(math_expect_calculate(sample), alpha=0.05, side='two_sided',
                             sigma=std_calculate(sample, ddof=1), distribution='t', n=len(sample))

my_print(f"Доверительный интервал: {ci}\n", color='синий')

# ----------------------------------------------------------------------------------------------------------------

task = "Известно, что рост футболистов в сборной распределен нормально \n" \
       "с дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки равен 27, \n" \
       "cреднее выборочное составляет 174.2. \n" \
       "Найдите доверительный интервал для математического ожидания с надежностью 0.95."

my_print(msg=task, separator_before=True, separator_after=False, color='зеленый')

sample = [131, 125, 115, 122, 131, 115, 107, 99, 125, 111]
ci = conf_interval_calculate(174.2, alpha=0.05, side='two_sided',
                             sigma=5, distribution='norm', n=27)

my_print(f"Доверительный интервал: {ci}\n", color='синий')
